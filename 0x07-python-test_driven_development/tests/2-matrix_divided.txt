===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided(matrix, div)``.

matrix
=======

``matrix`` must be a matrix (list of lists) of integers/floats, otherwise
raise a ``TypeError`` exception. Also,
Each row of the matrix must be of the same size, otherwise
raise a ``TypeError`` exception

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix_divided([['h', 5], [7, 9]], 5) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided(((49, 35), (7, 56)), 7) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[8, 5, 0], [7, 9, 3], [10, 11]], 4) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

div
====

``div`` must be a number (integer or float), otherwise
raise a ``TypeError`` exception. Also,
``div`` canâ€™t be equal to 0, otherwise
raise a ``ZeroDivisionError`` exception.

::

	>>> matrix_divided([[1, 4], [8.2, -6]], 2)
	[[0.5, 2.0], [4.1, -3.0]]
	>>> matrix_divided([[1, 4], [8.2, -6]], "Hello") #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: div must be a number
	>>> matrix_divided([[1, 4], [8.2, -6]], 0) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero
