===============================
 How to Use 3-say_my_name.py
===============================

This library is very simple, since it only has one function called
``say_my_name(first_name, last_name="")``.

missing two arguments
======================

::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name() #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	...
	TypeError: say_my_name() missing 1 required positional argument:
		'first_name'

missing one argument
=====================

It can handle it as it assign "" for the second argument

::

	>>> say_my_name("John") #doctest: +NORMALIZE_WHITESPACE
	My name is John 

Strings
========

``say_my_name(first_name, last_name="")`` prints the two arguments in the form:
``My name is <first_name> <last_name>``. For strings, it will be printed

::

	>>> say_my_name("Mazen", "Atlam")
	My name is Mazen Atlam

Non-Strings
============

``first_name`` and ``last_name`` must be strings, otherwise
raise a ``TypeError`` exception with the message
``first_name must be a string`` or ``last_name must be a string``

::

	>>> say_my_name(True, "Elgendy") #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string
	>>> say_my_name("Anas", -5) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string
	>>> say_my_name(None, 4) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string
