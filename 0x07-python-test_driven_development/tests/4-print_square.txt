===============================
 How to Use 4-print_square.py
===============================

This library is very simple, since it only has one function called
``print_square(size)`` that prints a square with the character ``#``

missing arguments
==================

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square() #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: print_square() missing 1 required positional argument: 'size'

Integers
=========

``size`` is the size length of the square.
If ``size`` is less than 0, raise a ValueError exception
with a message ``size must be >= 0``.

::

	>>> print_square(2)
	##
	##
	>>> print_square(0)
	>>> print_square(-7) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	ValueError: size must be >= 0

Non-Integers
=============

``size`` must be an integer, otherwise
raise a ``TypeError`` exception with the message
``size must be an integer``.

::

	>>> print_square(5.7) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: size must be an integer
	>>> print_square("Python") #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: size must be an integer
	>>> print_square(False) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: size must be an integer
	>>> print_square('k') #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: size must be an integer
	>>> print_square(None) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	TypeError: size must be an integer
